#pragma once
#include "stdafx.h"
#include "SDKDLL.h"
#include <iostream>
#include <chrono>
#include <thread>
#include <functional>
#include <mutex>
#include <ctime>
#include <cstdlib>

#define PI 3.14159265

const float xPosMap[MAX_LED_ROW][MAX_LED_COLUMN] = {
	{     0,    2,    3,    4,    5,   -1,  6.5,  7.5,  8.5,  9.5,    -1,    11,    12,   13,    14, 15.25, 16.25, 17.25, 18.5, 19.5, 20.5, 21.5 },
	{     0,    1,    2,    3,    4,    5,    6,    7,    8,    9,    10,    11,    12,   -1,  13.5, 15.25, 16.25, 17.25, 18.5, 19.5, 20.5, 21.5 },
	{  0.25,  1.5,  2.5,  3.5,  4.5,  5.5,  6.5,  7.5,  8.5,  9.5,  10.5,  11.5,  12.5,   -1, 13.75, 15.25, 16.25, 17.25, 18.5, 19.5, 20.5, 21.5 },
	{ 0.375, 1.75, 2.75, 3.75, 4.75, 5.75, 6.75, 7.75, 8.75, 9.75, 10.75, 11.75,    -1,   -1, 13.375,   -1,    -1,    -1, 18.5, 19.5, 20.5,   -1 },
	{ 0.625,   -1, 2.25, 3.25, 4.25, 5.25, 6.25, 7.25, 8.25, 9.25, 10.25, 11.25,    -1,   -1, 13.125,   -1, 16.25,    -1, 18.5, 19.5, 20.5, 21.5 },
	{ 0.125,1.375,2.625,   -1,   -1,   -1,6.375,   -1,   -1,   -1,10.125,11.375,12.625,   -1, 13.875,15.25, 16.25, 17.25,	19,   -1, 20.5,   -1 }
};

const float yPosMap[MAX_LED_ROW][MAX_LED_COLUMN] = {
	{     0,	0,    0,    0,    0,   -1,    0,    0,    0,    0,    -1,     0,     0,    0,      0,    0,     0,     0,    0,    0,    0,    0 },
	{  1.25, 1.25, 1.25, 1.25, 1.25, 1.25, 1.25, 1.25, 1.25, 1.25,  1.25,  1.25,  1.25,   -1,   1.25, 1.25,  1.25,  1.25, 1.25, 1.25, 1.25, 1.25 },
	{  2.25, 2.25, 2.25, 2.25, 2.25, 2.25, 2.25, 2.25, 2.25, 2.25,  2.25,  2.25,  2.25,   -1,   2.25, 2.25,  2.25,  2.25, 2.25, 2.25, 2.25, 2.75 },
	{  3.25, 3.25, 3.25, 3.25, 3.25, 3.25, 3.25, 3.25, 3.25, 3.25,  3.25,  3.25,    -1,   -1,   3.25,   -1,    -1,    -1, 3.25, 3.25, 3.25,   -1 },
	{  4.25,   -1, 4.25, 4.25, 4.25, 4.25, 4.25, 4.25, 4.25, 4.25,  4.25,  4.25,    -1,   -1,   4.25,   -1,  4.25,    -1, 4.25, 4.25, 4.25, 4.75 },
	{  5.25, 5.25, 5.25,   -1,   -1,   -1, 5.25,   -1,   -1,   -1,  5.25,  5.25,  5.25,   -1,   5.25, 5.25,  5.25,  5.25, 5.25,   -1, 5.25,   -1 }
};

void ColorCycleInit();
void ColorCycleStop();
void CALLBACK ColorCycleCallback(int iRow, int iColumn, bool bPressed);

void timer_start(std::function<void(void)> func);
void update();

void setRate(int);
void setSpread(float);
void setCycle(float);
void setSize(float);
void setStart(float);
void setColor(int);
void switchDevice(int);

